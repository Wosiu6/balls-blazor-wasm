@page "/"

@using AvnCanvasHelper;
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BallsBlazor.Core.Infrastructure
@using BallsBlazor.Core.Environment
@using BallsBlazor.Core.Infrastructure.Models
@using BallsBlazor.Core.Infrastructure.Services
@using System.Drawing;

<section class="main">
    <div class="wrapper">
        <div class="user-input-wrapper @(_userInputHidden ? "user-input collapsed" : "user-input shown")">
            <div class="sliders">
                <div>
                    <label>Time Step</label>
                    <input type="range" min="0.1" max="10" step="0.1" @bind="EnvironmentalVariables.TimeStep" @bind:event="oninput"/>
                    <span>@EnvironmentalVariables.TimeStep.ToString("F1")</span>
                </div>
                <div>
                    <label>Min Speed</label>
                    <input type="range" min="1" max="10" step="1" @bind="EnvironmentalVariables.MinimumSpeed" @bind:event="oninput"/>
                    <span>@EnvironmentalVariables.MinimumSpeed.ToString("F0")</span>
                </div>
                <div>
                    <label>Max Speed</label>
                    <input type="range" min="10" max="99" step="1" @bind="EnvironmentalVariables.MaximumSpeed" @bind:event="oninput"/>
                    <span>@EnvironmentalVariables.MaximumSpeed.ToString("F0")</span>
                </div>
                <div>
                    <label>Wall Elasticity</label>
                    <input type="range" min="0" max="1" step="0.01" @bind="EnvironmentalVariables.WallElasticity" @bind:event="oninput"/>
                    <span>@EnvironmentalVariables.WallElasticity.ToString("F2")</span>
                </div>
                <div>
                    <label>Air Resistance</label>
                    <input type="range" min="0" max="0.0001" step="0.0000001" @bind="EnvironmentalVariables.AirResistance" @bind:event="oninput"/>
                    <span>@EnvironmentalVariables.AirResistance.ToString("E2")</span>
                </div>
                <div>
                    <label>Gravity</label>
                    <input type="range" min="0" max="10" step="0.1" @bind="EnvironmentalVariables.GravitationalStrength" @bind:event="oninput"/>
                    <span>@DisplayGravitationalStrength</span>
                </div>
            </div>

            <div class="buttons">
                <button @onclick="ClearBalls">Clear All Balls</button>
                <button @onclick="Pause">@PauseText</button>
                <button @onclick="AddBall">Add Random Ball</button>
            </div>
            
            <div class="show-user-input-wrapper">
                <button @onclick="ToggleUserInput" class="show-user-input-button">
                    <image src="menu.png"></image>
                </button>
            </div>
        </div>
        
        <div class="canvas-wrapper">
            <CanvasHelper @ref="_canvasHelper"
                          CanvasResized="CanvasResized"
                          RenderFrame="RenderFrame"
                          MouseDown="MouseDown"
                          MouseUp="MouseUp"
                          MouseMove="MouseMove">
                <BECanvas @ref="_canvasReference"></BECanvas>
            </CanvasHelper>
        </div>
    </div>
</section>


@code {
    public string DisplayGravitationalStrength
    {
        get
        {
            return string.Format("{0:0.0}", EnvironmentalVariables.GravitationalStrength);
        }
    }

    private Canvas2DContext _canvasContext;
    private BECanvasComponent _canvasReference;
    private CanvasHelper _canvasHelper;
    private double _fps;

    private readonly Ballfield _ballfield = new();
    
    private static string PauseText => EnvironmentalVariables.IsPaused ? "Resume" : "Pause";

    private PhysicsService _physicsService = new();
    private bool _userInputHidden = true;

    protected override void OnInitialized()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        int initalNumberOfBalls = 10;

        if (firstRender)
        {
            _canvasContext = await _canvasReference.CreateCanvas2DAsync();
            await _canvasHelper.Initialize();

            for (var i = 0; i < initalNumberOfBalls; i++)
            {
                _ballfield.AddRandmBall();

                _ballfield.TouchedBalls.Add(-1);
                _ballfield.TouchX.Add(0);
                _ballfield.TouchXAfter.Add(0);
                _ballfield.TouchY.Add(0);
                _ballfield.TouchYAfter.Add(0);
            }
        }
    }

    public async Task RenderFrame(double fps)
    {
        if (EnvironmentalVariables.IsPaused)
        {
            return;
        }
        
        _fps = fps;

        await UpdateBackground();

        _physicsService.PerformMainCalculations(_ballfield); // need to exec synchronously for the data to be updated on the ui

        await DrawBalls();

        await ClearOutterBackground();

    }
    
    #region CanvasMethods
    private async Task UpdateBackground()
    {
        await this._canvasContext.BeginBatchAsync();

        await this._canvasContext.ClearRectAsync(0, 0, _ballfield.Width, _ballfield.Height);
        await this._canvasContext.SetFillStyleAsync("#003366");
        await this._canvasContext.FillRectAsync(0, 0, _ballfield.Width, _ballfield.Height);
        await this._canvasContext.SetFillStyleAsync("#FFFFFF");
        await this._canvasContext.SetFontAsync("16px consolas");
        await this._canvasContext.FillTextAsync($"FPS: {_fps:0}", _ballfield.Width - 100, 15);

        await this._canvasContext.EndBatchAsync();
    }

    private async Task ClearOutterBackground()
    {
        await this._canvasContext.BeginBatchAsync();

        await this._canvasContext.ClearRectAsync(_ballfield.Width, _ballfield.Height, -_ballfield.Width, 100);
        await this._canvasContext.ClearRectAsync(_ballfield.Width, _ballfield.Height, 100, -_ballfield.Height);
        await this._canvasContext.ClearRectAsync(_ballfield.Width, _ballfield.Height, 100, 100);

        await this._canvasContext.EndBatchAsync();
    }

    /// <summary>
    /// Called by CanvasHelper whenever the browser is resized.
    /// </summary>
    /// <param name="size"></param>
    public void CanvasResized(Size size)
    {
        _ballfield.Resize(size.Width, size.Height);
    }

    // Handle mouse down events
    void MouseDown(CanvasMouseArgs args)
    {

    }

    // Handle mouse up events
    void MouseUp(CanvasMouseArgs args)
    {

    }

    // Handle mouse move events
    void MouseMove(CanvasMouseArgs args)
    {

    }
    #endregion

    #region BallsMethods
    public async Task DrawBalls()
    {
        for (var i = 0; i < _ballfield.Balls.Count; i++)
        {
            Ball currentBall = _ballfield.Balls[i];

            switch (currentBall.Mode)
            {
                case 0:
                    await DrawBall(currentBall);
                    break;
                case 1:
                    await DrawBall(currentBall);
                    break;
                case 2: //Add support of different balls
                    await DrawBall(currentBall);
                    //if (i != 0)
                    //{
                    //
                    //
                    //}
                    break;
                case 3:
                    await DrawBall(currentBall);
                    //if (i != 0)
                    //{
                    //
                    //
                    //}
                    break;
            }
        }
    }

    private async Task DrawBall(Ball ball)
    {
        await this._canvasContext.BeginBatchAsync();

        await this._canvasContext.SetStrokeStyleAsync(ball.Color); // contour
        await this._canvasContext.BeginPathAsync();
        await this._canvasContext.ArcAsync(ball.X, ball.Y, ball.Radius, 0, 2 * Math.PI);
        await this._canvasContext.SetFillStyleAsync(ball.Color); // fill
        await this._canvasContext.FillAsync();

        await this._canvasContext.StrokeAsync();

        await this._canvasContext.EndBatchAsync();
    }

    private void ClearBalls()
    {
        _ballfield.ClearBalls();
    }
    
    private void Pause()
    {
        EnvironmentalVariables.IsPaused = !EnvironmentalVariables.IsPaused;
    }

    private void AddBall()
    {
        _ballfield.AddRandmBall();
    }
    
    private void ToggleUserInput()
    {
        _userInputHidden = !_userInputHidden;
    }
    #endregion
}